@model Restaurant_QKA.Models.InventoryTransaction

@using (Html.BeginForm("Create", "Transaction", new { area = "StaffWareHouse" }, FormMethod.Post, new { @id = "createTransactionForm", enctype = "multipart/form-data" }))
{
    @Html.AntiForgeryToken()
    <div class="container mt-4">
        <div class="card-body">
            <div class="row g-3">
                <div class="row">
                    <!-- Material Dropdown -->
                    <div class="form-group col-md-6">
                        @Html.LabelFor(m => m.MaterialID, "MaterialID", htmlAttributes: new { @class = "control-label" })

                        @if (ViewBag.Material != null)
                        {
                            @Html.DropDownListFor(m => m.MaterialID,
                            new SelectList(ViewBag.Material, "MaterialID", "Name"),
                            "-- Chọn Nguyên Liệu --",
                            new { @class = "form-control", required = "required" })
                        }
                        else
                        {
                            <p>Không Có Nguyên Liệu Nào</p>
                        }
                    </div>
                    <!-- Quantity -->
                    <div class="form-group col-md-6">
                        @Html.LabelFor(m => m.Quantity, htmlAttributes: new { @class = "control-label" })
                        @Html.TextBoxFor(m => m.Quantity, new { @class = "form-control", style = "form-control", @required = "required", @id = "quantity" })
                        @Html.ValidationMessageFor(m => m.Quantity, " ", new { @class = "text-danger" })
                    </div>
                </div>
                <div class="row">
                    <!-- Price -->
                    <div class="form-group col-md-6">
                        @Html.LabelFor(m => m.TotalPrice, htmlAttributes: new { @class = "control-label" })
                        @Html.TextBoxFor(m => m.TotalPrice, new { @class = "form-control", style = "form-control", @required = "required", @id = "price" })
                        @Html.ValidationMessageFor(m => m.TotalPrice, " ", new { @class = "text-danger" })
                    </div>
                    <!-- Total Price -->
                    <div class="form-group col-md-6">
                        <p class="form-label">Tổng Giá Hàng Nhập</p>
                        <p class="form-control" id="valuetransaction">0VND</p>
                    </div>
                </div>
                </div>
        </div>

        <!-- Submit button -->
        <div class="form-group">
            <button type="submit" class="btn btn-warning btn-block">Lưu Phiếu</button>
        </div>
    </div>
}


<script>
    // Đảm bảo sự kiện được gắn sau khi modal mở
    $('#TransactionModal').on('shown.bs.modal', function () {
        var quantity = document.getElementById("quantity");
        var price = document.getElementById("price");
        var totalTransaction = document.getElementById("valuetransaction");

        function calculateTotal()
        {
            var valuePrice = parseFloat(price.value) || 0;
            var valueQuantity = parseFloat(quantity.value) || 0;
            totalTransaction.innerText = (valuePrice * valueQuantity).toLocaleString('vi-VN') + " VND";
        }

        // Gắn lại sự kiện input khi modal mở
        quantity.addEventListener("input", calculateTotal);
        price.addEventListener("input", calculateTotal);
    });

</script>